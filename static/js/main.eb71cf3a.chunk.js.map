{"version":3,"sources":["components/HomePage.tsx","types/Filters.ts","utils/searchHelper.ts","components/SearchLink.tsx","utils/constants.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/Human.tsx","components/PersonList.tsx","components/PeopleTable.tsx","api.ts","types/SortType.tsx","utils/functions.tsx","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","components/PageNotFound.tsx","Root.tsx","index.tsx"],"names":["HomePage","className","PersonSex","FilterParams","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","tableSortButtons","filterCenturyButtons","PeopleFilters","setSearchParams","query","get","Query","centuries","getAll","Centuries","sex","Sex","handleFiltersByCenturyChange","century","includes","filter","classNames","Male","Female","type","placeholder","onChange","event","target","map","button","length","Loader","PersonLink","person","slug","name","Human","born","died","motherName","fatherName","mother","father","useParams","PersonList","people","PeopleTable","sort","Sort","order","Order","handleSortOrderChange","sortType","handleSortTypeChange","toLowerCase","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","SortType","checkQuery","string","preparedString","trim","preparedQuery","PeoplePage","useState","setPeople","errorMessage","setErrorMessage","isLoading","setIsLoading","useEffect","getPeople","catch","finally","preparedPeople","Name","a","b","localeCompare","Born","Died","reverse","Math","ceil","getPreparedPeople","peopleWithParents","find","mom","dad","isNoPeopleMessage","isErrorMessage","isShowPeople","isNoMatchingPeople","getLinkClass","isActive","Navbar","role","App","PageNotFound","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.eb71cf3a.chunk.js","sourcesContent":["export const HomePage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </div>\n);\n","export enum PersonSex {\n  Male = 'm',\n  Female = 'f',\n}\n\nexport enum FilterParams {\n  Sort = 'sort',\n  Order = 'order',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sex = 'sex',\n  Descending = 'desc',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const tableSortButtons = ['Name', 'Sex', 'Born', 'Died'];\nexport const filterCenturyButtons = ['16', '17', '18', '19', '20'];\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { FilterParams, PersonSex } from '../types/Filters';\nimport { SearchLink } from './SearchLink';\nimport { filterCenturyButtons } from '../utils/constants';\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(FilterParams.Query) || '';\n  const centuries = searchParams.getAll(FilterParams.Centuries) || [];\n  const sex = searchParams.get(FilterParams.Sex) || null;\n\n  function isCenturySelected(century: string) {\n    return centuries.includes(century);\n  }\n\n  const handleFiltersByCenturyChange = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(filter => filter !== century)\n      : [...centuries, century];\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const params = new URLSearchParams(searchParams);\n\n    params.set(FilterParams.Query, event.target.value);\n    setSearchParams(params);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sex === null,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === PersonSex.Male,\n          })}\n          params={{ sex: PersonSex.Male }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === PersonSex.Female,\n          })}\n          params={{ sex: PersonSex.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {filterCenturyButtons.map(button => (\n              <SearchLink\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': isCenturySelected(`${button}`),\n                })}\n                params={{ centuries: handleFiltersByCenturyChange(`${button}`) }}\n              >\n                {button}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': !!centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonSex } from '../types/Filters';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  return (\n    <>\n      <Link\n        to={`../${slug}`}\n        className={classNames({\n          'has-text-danger': sex === PersonSex.Female,\n        })}\n      >\n        {name}\n      </Link>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const Human: React.FC<Props> = ({\n  person,\n}) => {\n  const {\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n\n  const { slug = '' } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === person.slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {motherName && mother\n          ? <PersonLink person={mother} />\n          : (motherName || '-')}\n      </td>\n\n      <td>\n        {fatherName && father\n          ? <PersonLink person={father} />\n          : (fatherName || '-')}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../types';\nimport { Human } from './Human';\n\ntype Props = {\n  people?: Person[];\n};\n\nexport const PersonList: React.FC<Props> = ({\n  people,\n}) => {\n  return (\n    <>\n      {people && people.map(person => (\n        <Human\n          key={person.slug}\n          person={person}\n        />\n      ))}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { PersonList } from './PersonList';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { tableSortButtons } from '../utils/constants';\nimport { FilterParams } from '../types/Filters';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get(FilterParams.Sort) || null;\n  const order = searchParams.get(FilterParams.Order) || null;\n\n  const handleSortOrderChange = (sortType : string) => {\n    if (sort === sortType) {\n      return order ? null : 'desc';\n    }\n\n    return null;\n  };\n\n  const handleSortTypeChange = (sortType: string) => {\n    if (sort === sortType && order === 'desc') {\n      return null;\n    }\n\n    return sortType;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableSortButtons.map((button) => {\n            const sortType = button.toLowerCase();\n\n            return (\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {button}\n                  <SearchLink\n                    params={{\n                      sort: handleSortTypeChange(sortType) || null,\n                      order: handleSortOrderChange(sortType) || null,\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('fas', {\n                          'fa-sort': sort !== sortType,\n                          'fa-sort-up': sort === sortType\n                            && !order,\n                          'fa-sort-down': sort === sortType\n                            && order,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <PersonList people={people} />\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum SortType {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { Person } from '../types';\nimport { PersonSex } from '../types/Filters';\nimport { SortType } from '../types/SortType';\n\nfunction checkQuery(string: string, query: string): boolean {\n  const preparedString = string?.toLowerCase().trim();\n  const preparedQuery = query.toLowerCase().trim();\n\n  return preparedString.includes(preparedQuery);\n}\n\nexport function getPreparedPeople(\n  people: Person[],\n  sex: string | null,\n  centuries: string[],\n  query: string,\n  sort: string | null,\n  order: string | null,\n) {\n  let preparedPeople = [...people];\n\n  if (sex === PersonSex.Male) {\n    preparedPeople = preparedPeople.filter((person) => {\n      return person.sex === PersonSex.Male;\n    });\n  }\n\n  if (sex === PersonSex.Female) {\n    preparedPeople = preparedPeople.filter((person) => {\n      return person.sex === PersonSex.Female;\n    });\n  }\n\n  if (sort) {\n    switch (sort) {\n      case (SortType.Name): {\n        preparedPeople = preparedPeople.sort(\n          (a, b) => a.name.localeCompare(b.name),\n        );\n        break;\n      }\n\n      case (SortType.Sex): {\n        preparedPeople = preparedPeople.sort(\n          (a, b) => a.sex.localeCompare(b.sex),\n        );\n        break;\n      }\n\n      case (SortType.Born): {\n        preparedPeople = preparedPeople.sort(\n          (a, b) => a.born - b.born,\n        );\n        break;\n      }\n\n      case (SortType.Died): {\n        preparedPeople = preparedPeople.sort(\n          (a, b) => a.died - b.died,\n        );\n        break;\n      }\n\n      default: {\n        return preparedPeople;\n      }\n    }\n\n    if (order) {\n      preparedPeople = preparedPeople.reverse();\n    }\n  }\n\n  if (centuries.length !== 0) {\n    preparedPeople = preparedPeople.filter(person => {\n      const century = Math.ceil(person.born / 100).toString();\n\n      return centuries.includes(century);\n    });\n  }\n\n  if (query) {\n    preparedPeople = preparedPeople.filter(person => {\n      return checkQuery(person.name, query)\n      || checkQuery(person.motherName ?? '', query)\n      || checkQuery(person.fatherName ?? '', query);\n    });\n  }\n\n  return preparedPeople;\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { getPreparedPeople } from '../utils/functions';\nimport { FilterParams } from '../types/Filters';\n\nexport const PeoplePage = () => {\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(FilterParams.Query) || '';\n  const centuries = searchParams.getAll(FilterParams.Centuries) || [];\n  const sex = searchParams.get(FilterParams.Sex) || null;\n  const sort = searchParams.get(FilterParams.Sort) || null;\n  const order = searchParams.get(FilterParams.Order) || null;\n\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setErrorMessage('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const preparedPeople = getPreparedPeople(\n    people,\n    sex,\n    centuries,\n    query,\n    sort,\n    order,\n  );\n\n  const peopleWithParents = preparedPeople.map((person) => {\n    const mother = people.find(mom => mom.name === person.motherName);\n    const father = people.find(dad => dad.name === person.fatherName);\n\n    return { ...person, mother, father };\n  });\n\n  const isNoPeopleMessage = !people.length && !errorMessage && !isLoading;\n  const isErrorMessage = errorMessage && !isLoading;\n  const isShowPeople = !isLoading && !isErrorMessage && !!preparedPeople.length;\n  const isNoMatchingPeople = !preparedPeople.length && query;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isErrorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isNoPeopleMessage && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isNoMatchingPeople && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isShowPeople && (<PeopleTable people={peopleWithParents} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames('navbar-item', {\n  'has-background-grey-lighter': isActive,\n});\n\nexport const Navbar: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const PageNotFound: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Page not found</h1>\n  </div>\n);\n","import {\n  HashRouter, Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { App } from './App';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}